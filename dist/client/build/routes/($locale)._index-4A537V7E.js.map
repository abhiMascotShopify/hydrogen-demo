{
  "version": 3,
  "sources": ["../../../../app/routes/($locale)._index.jsx"],
  "sourcesContent": ["import {defer} from '@shopify/remix-oxygen';\nimport {Await, useLoaderData, Link} from '@remix-run/react';\nimport {Suspense} from 'react';\nimport {Image, Money} from '@shopify/hydrogen';\nimport ProductCard from 'app/components/productCard';\nimport ShopifyCarousel from '~/components/ShopifyCarousel';\n\nexport const meta = () => {\n  return [{title: 'Hydrogen | Home'}];\n};\n\nexport async function loader({context}) {\n  const {storefront} = context;\n  const {collections} = await storefront.query(FEATURED_COLLECTION_QUERY);\n  //console.log(collections.nodes[0].products);\n  const collectionProducts = collections;\n  const featuredCollection = collections.nodes[1];\n  const recommendedProducts = storefront.query(RECOMMENDED_PRODUCTS_QUERY);\n  const collection = collections;\n\n  return defer({featuredCollection, recommendedProducts,collections,collectionProducts });\n}\n\nexport default function Homepage() {\n  const data = useLoaderData();\n  return (\n    <div className=\"home\">\n      <div className='flex'>\n      <FeaturedCollection collection={data.featuredCollection} />\n      <FeaturedCollection collection={data.featuredCollection} />\n      <FeaturedCollection collection={data.featuredCollection} />\n      </div>\n      {data.collectionProducts.nodes.map((coll)=>(\n        <RecommendedProducts key={coll.id} products={coll.products} title={coll.title}/>\n      ))\n      }\n      {/*<RecommendedProducts products={data.recommendedProducts} />*/}\n      {/*console.log(data.collectionProducts)*/}\n    </div>\n  );\n}\n\nfunction FeaturedCollection({collection}) {\n  const image = collection.image;\n  return (\n    <Link\n      className=\"featured-collection\"\n      to={`/collections/${collection.handle}`}\n    >\n      {image && (\n        <div className=\"featured-collection-image\">\n          <Image data={image} sizes=\"100vw\" />\n        </div>\n      )}\n      <h3 className='px-5'>{collection.title}</h3>\n    </Link>\n  );\n}\n\nfunction RecommendedProducts({products, title}) {\n  return (\n    <>\n    <h3 className='text-center'>- - {title} - -</h3>\n  <div className='flex'> \n      <Suspense fallback={<div>Loading...</div>}>\n        <Await resolve={products}> \n         <ShopifyCarousel products={products}></ShopifyCarousel>\n        </Await>\n      </Suspense>\n      <br />\n    </div>\n    </>\n  );\n} \n\nconst FEATURED_COLLECTION_QUERY = `#graphql\n  fragment FeaturedCollection on Collection {\n    products(first:10){\n          edges{\n            node{\n              id\n              title\n              handle\n              images(first:1){\n                edges{\n                  node{\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n    id\n    title\n    image {\n      id\n      url\n      altText\n      width\n      height\n    }\n    handle\n  }\n  query FeaturedCollection($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    collections(first: 4, sortKey: UPDATED_AT, reverse: true) {\n      nodes {\n        ...FeaturedCollection\n      }\n    }\n  }\n`;\n\nconst RECOMMENDED_PRODUCTS_QUERY = `#graphql\n  fragment RecommendedProduct on Product {\n    id\n    title\n    handle\n    priceRange {\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    images(first: 1) {\n      nodes {\n        id\n        url\n        altText\n        width\n        height\n      }\n    }\n  }\n  query RecommendedProducts ($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    products(first: 10, sortKey: UPDATED_AT, reverse: true) {\n      nodes {\n        ...RecommendedProduct\n      }\n    }\n  }\n`;\n/*\nconst GET_COLLECTION_BY_HANDLE = gql`\nquery GetCollectionByHandle($handle: String!) {\n  collectionByHandle(handle: $handle) {\n    id\n    title\n    products(first: 10) {\n      edges {\n        node {\n          id\n          title\n          priceRange {\n            minVariantPrice {\n              amount\n              currencyCode\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconsole.log(GET_COLLECTION_BY_HANDLE);*/\n\nconst COLLECTION_QUERY = `#graphql\n  fragment Collection on Collection {\n        id\n        title\n        handle\n        description\n      }\n  query Collections ($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    collections(first: 4, sortKey: UPDATED_AT, reverse: true) {\n      nodes {\n        ...Collections\n      }\n    }\n  }\n`;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAEA,IAAAA,gBAAuB;AA0BjB;AArBC,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC,EAAC,OAAO,kBAAiB,CAAC;AACpC;AAce,SAAR,WAA4B;AACjC,QAAM,OAAO,cAAc;AAC3B,SACE,mDAAC,SAAI,WAAU,QACb;AAAA,uDAAC,SAAI,WAAU,QACf;AAAA,yDAAC,sBAAmB,YAAY,KAAK,sBAArC;AAAA;AAAA;AAAA;AAAA,aAAyD;AAAA,MACzD,mDAAC,sBAAmB,YAAY,KAAK,sBAArC;AAAA;AAAA;AAAA;AAAA,aAAyD;AAAA,MACzD,mDAAC,sBAAmB,YAAY,KAAK,sBAArC;AAAA;AAAA;AAAA;AAAA,aAAyD;AAAA,SAHzD;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IACC,KAAK,mBAAmB,MAAM,IAAI,CAAC,SAClC,mDAAC,uBAAkC,UAAU,KAAK,UAAU,OAAO,KAAK,SAA9C,KAAK,IAA/B;AAAA;AAAA;AAAA;AAAA,WAA8E,CAC/E;AAAA,OARH;AAAA;AAAA;AAAA;AAAA,SAYA;AAEJ;AAEA,SAAS,mBAAmB,EAAC,WAAU,GAAG;AACxC,QAAM,QAAQ,WAAW;AACzB,SACE;AAAA,IAAC;AAAA;AAAA,MACC,WAAU;AAAA,MACV,IAAI,gBAAgB,WAAW;AAAA,MAE9B;AAAA,iBACC,mDAAC,SAAI,WAAU,6BACb,6DAAC,SAAM,MAAM,OAAO,OAAM,WAA1B;AAAA;AAAA;AAAA;AAAA,eAAkC,KADpC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QAEF,mDAAC,QAAG,WAAU,QAAQ,qBAAW,SAAjC;AAAA;AAAA;AAAA;AAAA,eAAuC;AAAA;AAAA;AAAA,IATzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA;AAEJ;AAEA,SAAS,oBAAoB,EAAC,UAAU,MAAK,GAAG;AAC9C,SACE,sFACA;AAAA,uDAAC,QAAG,WAAU,eAAc;AAAA;AAAA,MAAK;AAAA,MAAM;AAAA,SAAvC;AAAA;AAAA;AAAA;AAAA,WAA2C;AAAA,IAC7C,mDAAC,SAAI,WAAU,QACX;AAAA,yDAAC,0BAAS,UAAU,mDAAC,SAAI,0BAAL;AAAA;AAAA;AAAA;AAAA,aAAe,GACjC,6DAAC,SAAM,SAAS,UACf,6DAAC,2BAAgB,YAAjB;AAAA;AAAA;AAAA;AAAA,aAAqC,KADtC;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,SANR;AAAA;AAAA;AAAA;AAAA,WAOE;AAAA,OATA;AAAA;AAAA;AAAA;AAAA,SAUA;AAEJ;",
  "names": ["import_react"]
}
