{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.orders._index.jsx"],
  "sourcesContent": ["import {Link, useLoaderData} from '@remix-run/react';\nimport {Money, Pagination, getPaginationVariables} from '@shopify/hydrogen';\nimport {json, redirect} from '@shopify/remix-oxygen';\n\nexport const meta = () => {\n  return [{title: 'Orders'}];\n};\n\nexport async function loader({request, context}) {\n  const {session, storefront} = context;\n\n  const customerAccessToken = await session.get('customerAccessToken');\n  if (!customerAccessToken?.accessToken) {\n    return redirect('/account/login');\n  }\n\n  try {\n    const paginationVariables = getPaginationVariables(request, {\n      pageBy: 20,\n    });\n\n    const {customer} = await storefront.query(CUSTOMER_ORDERS_QUERY, {\n      variables: {\n        customerAccessToken: customerAccessToken.accessToken,\n        country: storefront.i18n.country,\n        language: storefront.i18n.language,\n        ...paginationVariables,\n      },\n      cache: storefront.CacheNone(),\n    });\n\n    if (!customer) {\n      throw new Error('Customer not found');\n    }\n\n    return json({customer});\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n}\n\nexport default function Orders() {\n  const {customer} = useLoaderData();\n  const {orders, numberOfOrders} = customer;\n  return (\n    <div className=\"orders\">\n      <h2>\n        Orders <small>({numberOfOrders})</small>\n      </h2>\n      <br />\n      {orders.nodes.length ? <OrdersTable orders={orders} /> : <EmptyOrders />}\n    </div>\n  );\n}\n\nfunction OrdersTable({orders}) {\n  return (\n    <div className=\"acccount-orders\">\n      {orders?.nodes.length ? (\n        <Pagination connection={orders}>\n          {({nodes, isLoading, PreviousLink, NextLink}) => {\n            return (\n              <>\n                <PreviousLink>\n                  {isLoading ? 'Loading...' : <span>\u2191 Load previous</span>}\n                </PreviousLink>\n                {nodes.map((order) => {\n                  return <OrderItem key={order.id} order={order} />;\n                })}\n                <NextLink>\n                  {isLoading ? 'Loading...' : <span>Load more \u2193</span>}\n                </NextLink>\n              </>\n            );\n          }}\n        </Pagination>\n      ) : (\n        <EmptyOrders />\n      )}\n    </div>\n  );\n}\n\nfunction EmptyOrders() {\n  return (\n    <div>\n      <p>You haven&apos;t placed any orders yet.</p>\n      <br />\n      <p>\n        <Link to=\"/collections\">Start Shopping \u2192</Link>\n      </p>\n    </div>\n  );\n}\n\nfunction OrderItem({order}) {\n  return (\n    <>\n      <fieldset>\n        <Link to={`/account/orders/${order.id}`}>\n          <strong>#{order.orderNumber}</strong>\n        </Link>\n        <p>{new Date(order.processedAt).toDateString()}</p>\n        <p>{order.financialStatus}</p>\n        <p>{order.fulfillmentStatus}</p>\n        <Money data={order.currentTotalPrice} />\n        <Link to={`/account/orders/${btoa(order.id)}`}>View Order \u2192</Link>\n      </fieldset>\n      <br />\n    </>\n  );\n}\n\nconst ORDER_ITEM_FRAGMENT = `#graphql\n  fragment OrderItem on Order {\n    currentTotalPrice {\n      amount\n      currencyCode\n    }\n    financialStatus\n    fulfillmentStatus\n    id\n    lineItems(first: 10) {\n      nodes {\n        title\n        variant {\n          image {\n            url\n            altText\n            height\n            width\n          }\n        }\n      }\n    }\n    orderNumber\n    customerUrl\n    statusUrl\n    processedAt\n  }\n`;\n\nexport const CUSTOMER_FRAGMENT = `#graphql\n  fragment CustomerOrders on Customer {\n    numberOfOrders\n    orders(\n      sortKey: PROCESSED_AT,\n      reverse: true,\n      first: $first,\n      last: $last,\n      before: $startCursor,\n      after: $endCursor\n    ) {\n      nodes {\n        ...OrderItem\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n  ${ORDER_ITEM_FRAGMENT}\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/customer\nconst CUSTOMER_ORDERS_QUERY = `#graphql\n  ${CUSTOMER_FRAGMENT}\n  query CustomerOrders(\n    $country: CountryCode\n    $customerAccessToken: String!\n    $endCursor: String\n    $first: Int\n    $language: LanguageCode\n    $last: Int\n    $startCursor: String\n  ) @inContext(country: $country, language: $language) {\n    customer(customerAccessToken: $customerAccessToken) {\n      ...CustomerOrders\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": []
}
