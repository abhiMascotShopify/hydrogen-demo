{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.profile.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {\n  Form,\n  useActionData,\n  useNavigation,\n  useOutletContext,\n} from '@remix-run/react';\n\nexport const meta = () => {\n  return [{title: 'Profile'}];\n};\n\nexport async function loader({context}) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (!customerAccessToken) {\n    return redirect('/account/login');\n  }\n  return json({});\n}\n\nexport async function action({request, context}) {\n  const {session, storefront} = context;\n\n  if (request.method !== 'PUT') {\n    return json({error: 'Method not allowed'}, {status: 405});\n  }\n\n  const form = await request.formData();\n  const customerAccessToken = await session.get('customerAccessToken');\n  if (!customerAccessToken) {\n    return json({error: 'Unauthorized'}, {status: 401});\n  }\n\n  try {\n    const password = getPassword(form);\n    const customer = {};\n    const validInputKeys = [\n      'firstName',\n      'lastName',\n      'email',\n      'password',\n      'phone',\n    ];\n    for (const [key, value] of form.entries()) {\n      if (!validInputKeys.includes(key)) {\n        continue;\n      }\n      if (key === 'acceptsMarketing') {\n        customer.acceptsMarketing = value === 'on';\n      }\n      if (typeof value === 'string' && value.length) {\n        customer[key] = value;\n      }\n    }\n\n    if (password) {\n      customer.password = password;\n    }\n\n    // update customer and possibly password\n    const updated = await storefront.mutate(CUSTOMER_UPDATE_MUTATION, {\n      variables: {\n        customerAccessToken: customerAccessToken.accessToken,\n        customer,\n      },\n    });\n\n    // check for mutation errors\n    if (updated.customerUpdate?.customerUserErrors?.length) {\n      return json(\n        {error: updated.customerUpdate?.customerUserErrors[0]},\n        {status: 400},\n      );\n    }\n\n    // update session with the updated access token\n    if (updated.customerUpdate?.customerAccessToken?.accessToken) {\n      session.set(\n        'customerAccessToken',\n        updated.customerUpdate?.customerAccessToken,\n      );\n    }\n\n    return json(\n      {error: null, customer: updated.customerUpdate?.customer},\n      {\n        headers: {\n          'Set-Cookie': await session.commit(),\n        },\n      },\n    );\n  } catch (error) {\n    return json({error: error.message, customer: null}, {status: 400});\n  }\n}\n\nexport default function AccountProfile() {\n  const account = useOutletContext();\n  const {state} = useNavigation();\n  const action = useActionData();\n  const customer = action?.customer ?? account?.customer;\n\n  return (\n    <div className=\"account-profile\">\n      <h2>My profile</h2>\n      <br />\n      <Form method=\"PUT\">\n        <legend>Personal information</legend>\n        <fieldset>\n          <label htmlFor=\"firstName\">First name</label>\n          <input\n            id=\"firstName\"\n            name=\"firstName\"\n            type=\"text\"\n            autoComplete=\"given-name\"\n            placeholder=\"First name\"\n            aria-label=\"First name\"\n            defaultValue={customer.firstName ?? ''}\n            minLength={2}\n          />\n          <label htmlFor=\"lastName\">Last name</label>\n          <input\n            id=\"lastName\"\n            name=\"lastName\"\n            type=\"text\"\n            autoComplete=\"family-name\"\n            placeholder=\"Last name\"\n            aria-label=\"Last name\"\n            defaultValue={customer.lastName ?? ''}\n            minLength={2}\n          />\n          <label htmlFor=\"phone\">Mobile</label>\n          <input\n            id=\"phone\"\n            name=\"phone\"\n            type=\"tel\"\n            autoComplete=\"tel\"\n            placeholder=\"Mobile\"\n            aria-label=\"Mobile\"\n            defaultValue={customer.phone ?? ''}\n          />\n          <label htmlFor=\"email\">Email address</label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            required\n            placeholder=\"Email address\"\n            aria-label=\"Email address\"\n            defaultValue={customer.email ?? ''}\n          />\n          <div className=\"account-profile-marketing\">\n            <input\n              id=\"acceptsMarketing\"\n              name=\"acceptsMarketing\"\n              type=\"checkbox\"\n              placeholder=\"Accept marketing\"\n              aria-label=\"Accept marketing\"\n              defaultChecked={customer.acceptsMarketing}\n            />\n            <label htmlFor=\"acceptsMarketing\">\n              &nbsp; Subscribed to marketing communications\n            </label>\n          </div>\n        </fieldset>\n        <br />\n        <legend>Change password (optional)</legend>\n        <fieldset>\n          <label htmlFor=\"currentPassword\">Current password</label>\n          <input\n            id=\"currentPassword\"\n            name=\"currentPassword\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Current password\"\n            aria-label=\"Current password\"\n            minLength={8}\n          />\n\n          <label htmlFor=\"newPassword\">New password</label>\n          <input\n            id=\"newPassword\"\n            name=\"newPassword\"\n            type=\"password\"\n            placeholder=\"New password\"\n            aria-label=\"New password\"\n            minLength={8}\n          />\n\n          <label htmlFor=\"newPasswordConfirm\">New password (confirm)</label>\n          <input\n            id=\"newPasswordConfirm\"\n            name=\"newPasswordConfirm\"\n            type=\"password\"\n            placeholder=\"New password (confirm)\"\n            aria-label=\"New password confirm\"\n            minLength={8}\n          />\n          <small>Passwords must be at least 8 characters.</small>\n        </fieldset>\n        {action?.error ? (\n          <p>\n            <mark>\n              <small>{action.error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        <button type=\"submit\" disabled={state !== 'idle'}>\n          {state !== 'idle' ? 'Updating' : 'Update'}\n        </button>\n      </Form>\n    </div>\n  );\n}\n\nfunction getPassword(form) {\n  let password;\n  const currentPassword = form.get('currentPassword');\n  const newPassword = form.get('newPassword');\n  const newPasswordConfirm = form.get('newPasswordConfirm');\n\n  let passwordError;\n  if (newPassword && !currentPassword) {\n    passwordError = new Error('Current password is required.');\n  }\n\n  if (newPassword && newPassword !== newPasswordConfirm) {\n    passwordError = new Error('New passwords must match.');\n  }\n\n  if (newPassword && currentPassword && newPassword === currentPassword) {\n    passwordError = new Error(\n      'New password must be different than current password.',\n    );\n  }\n\n  if (passwordError) {\n    throw passwordError;\n  }\n\n  if (currentPassword && newPassword) {\n    password = newPassword;\n  } else {\n    password = currentPassword;\n  }\n\n  return String(password);\n}\n\nconst CUSTOMER_UPDATE_MUTATION = `#graphql\n  # https://shopify.dev/docs/api/storefront/latest/mutations/customerUpdate\n  mutation customerUpdate(\n    $customerAccessToken: String!,\n    $customer: CustomerUpdateInput!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(language: $language, country: $country) {\n    customerUpdate(customerAccessToken: $customerAccessToken, customer: $customer) {\n      customer {\n        acceptsMarketing\n        email\n        firstName\n        id\n        lastName\n        phone\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": []
}
