{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.register.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {Form, Link, useActionData} from '@remix-run/react';\n\nexport async function loader({context}) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (customerAccessToken) {\n    return redirect('/account');\n  }\n\n  return json({});\n}\n\nexport const action = async ({request, context}) => {\n  if (request.method !== 'POST') {\n    return json({error: 'Method not allowed'}, {status: 405});\n  }\n\n  const {storefront, session} = context;\n  const form = await request.formData();\n  const email = String(form.has('email') ? form.get('email') : '');\n  const password = form.has('password') ? String(form.get('password')) : null;\n  const passwordConfirm = form.has('passwordConfirm')\n    ? String(form.get('passwordConfirm'))\n    : null;\n\n  const validPasswords =\n    password && passwordConfirm && password === passwordConfirm;\n\n  const validInputs = Boolean(email && password);\n  try {\n    if (!validPasswords) {\n      throw new Error('Passwords do not match');\n    }\n\n    if (!validInputs) {\n      throw new Error('Please provide both an email and a password.');\n    }\n\n    const {customerCreate} = await storefront.mutate(CUSTOMER_CREATE_MUTATION, {\n      variables: {\n        input: {email, password},\n      },\n    });\n\n    if (customerCreate?.customerUserErrors?.length) {\n      throw new Error(customerCreate?.customerUserErrors[0].message);\n    }\n\n    const newCustomer = customerCreate?.customer;\n    if (!newCustomer?.id) {\n      throw new Error('Could not create customer');\n    }\n    //console.log(newCustomer.id)\n\n    // get an access token for the new customer\n    const {customerAccessTokenCreate,} = await storefront.mutate(\n      REGISTER_LOGIN_MUTATION,\n      {\n        variables: {\n          input: {\n            email,\n            password,\n          },\n        },\n      },\n    );\n\n    if (!customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n      throw new Error('Missing access token');\n    }\n    session.set(\n      'customerAccessToken',\n      customerAccessTokenCreate?.customerAccessToken,\n    );\n\n    return json(\n      {error: null, newCustomer},\n      {\n        status: 302,\n        headers: {\n          'Set-Cookie': await session.commit(),\n          Location: '/account',\n        },\n      },\n    );\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n};\n\nexport default function Register() {\n  const data = useActionData();\n  const error = data?.error || null;\n  return (\n    <>\n    {/*\n    <div className=\"login\">\n      <h1>Register.</h1>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"email\">Email address</label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            required\n            placeholder=\"Email address\"\n            aria-label=\"Email address\"\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n          />\n          <label htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            minLength={8}\n            required\n          />\n          <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n          <input\n            id=\"passwordConfirm\"\n            name=\"passwordConfirm\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Re-enter password\"\n            aria-label=\"Re-enter password\"\n            minLength={8}\n            required\n          />\n        </fieldset>\n        {error ? (\n          <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        <button type=\"submit\">Register</button>\n      </Form>\n      <br />\n      <p>\n        <Link to=\"/account/login\">Login \u2192</Link>\n      </p>\n    </div>*/}\n    <div className=\"flex flex-col-reverse sm:flex-row\">\n<div className=\"sm:w-1/2 hidden sm:block\">\n\n        <img\n          src=\"https://media.sugarpop.com/upload/LoginSideImg.png\"\n          alt=\"Login Background\"\n          className=\"w-full h-full object-cover\"\n        />\n      </div>\n      <div className=\"w-full justify-center items-center flex flex-col\">\n  <Form className=\"w-full justify-center items-center\" method=\"POST\">\n   <fieldset>\n    <div className=\"mb-3\" >\n      <label className=\"block text-gray-700 text-sm font-bold mb-2\" for=\"username\">\n        Email\n      </label>\n      <input className=\"shadow appearance-none border rounded w-full py-1 px-2 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" \n        id=\"email\"\n        name=\"email\"\n        type=\"email\"\n        autoComplete=\"email\"\n        placeholder=\"Email address\"\n        aria-label=\"Email address\"\n        required/>\n    </div>\n    <div className=\"mb-4\">\n      <label className=\"block text-gray-700 text-sm font-bold mb-2\" for=\"password\">\n        Password\n      </label>\n      <input className=\"shadow appearance-none border rounded w-full py-1 px-2 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\" \n      id=\"password\"\n      name=\"password\"\n      type=\"password\"\n      autoComplete=\"current-password\"\n      placeholder=\"Password\"\n      aria-label=\"Password\"\n      minLength={8}\n      required/>\n      {error ? (\n          <p className=\"text-red-500 text-xs italic\">{error}</p>\n        ) : (\n          <br />\n        )}\n      <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n          <input className=\"shadow appearance-none border rounded w-full py-1 px-2 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline\"\n            id=\"passwordConfirm\"\n            name=\"passwordConfirm\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Re-enter password\"\n            aria-label=\"Re-enter password\"\n            minLength={8}\n            required\n          />\n    </div>\n     </fieldset>\n    <div className=\"flex items-center justify-between\">\n      <button className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\" type=\"submit\">\n        Register\n      </button>\n      <a className=\"inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800\" href=\"/account/recover\">\n        Forgot Password?\n      </a>\n    </div>\n  </Form>\n  <p className=\"text-center text-gray-500 text-xs\">\n    &copy;2023. All rights reserved.\n  </p>\n</div>\n      \n    </div>\n    </>\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerCreate\nconst CUSTOMER_CREATE_MUTATION = `#graphql\n  mutation customerCreate(\n    $input: CustomerCreateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerCreate(input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraccesstokencreate\nconst REGISTER_LOGIN_MUTATION = `#graphql\n  mutation registerLogin(\n    $input: CustomerAccessTokenCreateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n"],
  "mappings": "wHAiGI,IAAAA,EAAA,OAJW,SAARC,GAA4B,CAEjC,IAAMC,EADOC,EAAc,GACP,OAAS,KAC7B,SACE,mBAyDA,oBAAC,OAAI,UAAU,oCACnB,oBAAC,OAAI,UAAU,2BAEP,mBAAC,OACC,IAAI,qDACJ,IAAI,mBACJ,UAAU,6BACZ,EACF,KACA,QAAC,OAAI,UAAU,mDACnB,qBAACC,EAAA,CAAK,UAAU,qCAAqC,OAAO,OAC3D,qBAAC,YACA,qBAAC,OAAI,UAAU,OACb,oBAAC,SAAM,UAAU,6CAA6C,IAAI,WAAW,iBAE7E,KACA,OAAC,SAAM,UAAU,6HACf,GAAG,QACH,KAAK,QACL,KAAK,QACL,aAAa,QACb,YAAY,gBACZ,aAAW,gBACX,SAAQ,MACZ,KACA,QAAC,OAAI,UAAU,OACb,oBAAC,SAAM,UAAU,6CAA6C,IAAI,WAAW,oBAE7E,KACA,OAAC,SAAM,UAAU,kIACjB,GAAG,WACH,KAAK,WACL,KAAK,WACL,aAAa,mBACb,YAAY,WACZ,aAAW,WACX,UAAW,EACX,SAAQ,KACPF,KACG,OAAC,KAAE,UAAU,8BAA+B,SAAAA,EAAM,KAElD,OAAC,OAAG,KAER,OAAC,SAAM,QAAQ,kBAAkB,6BAAiB,KAC9C,OAAC,SAAM,UAAU,kIACf,GAAG,kBACH,KAAK,kBACL,KAAK,WACL,aAAa,mBACb,YAAY,oBACZ,aAAW,oBACX,UAAW,EACX,SAAQ,GACV,GACN,GACC,KACD,QAAC,OAAI,UAAU,oCACb,oBAAC,UAAO,UAAU,+GAA+G,KAAK,SAAS,oBAE/I,KACA,OAAC,KAAE,UAAU,kFAAkF,KAAK,mBAAmB,4BAEvH,GACF,GACF,KACA,OAAC,KAAE,UAAU,oCAAoC,0CAEjD,GACF,GAEI,EACA,CAEJ",
  "names": ["import_jsx_runtime", "Register", "error", "useActionData", "Form"]
}
