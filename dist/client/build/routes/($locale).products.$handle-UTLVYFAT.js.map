{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).products.$handle.jsx"],
  "sourcesContent": ["import {Suspense} from 'react';\nimport {defer, redirect} from '@shopify/remix-oxygen';\nimport {Await, Link, useLoaderData} from '@remix-run/react';\nimport React, { useState } from 'react';\n\nimport {\n  Image,\n  Money,\n  VariantSelector,\n  getSelectedProductOptions,\n  CartForm,\n} from '@shopify/hydrogen';\nimport {getVariantUrl} from '~/utils';\n\nexport const meta = ({data}) => {\n  return [{title: `Hydrogen | ${data.product.title}`}];\n};\n\nexport async function loader({params, request, context}) {\n  const {handle} = params;\n  const {storefront} = context;\n\n  const selectedOptions = getSelectedProductOptions(request).filter(\n    (option) =>\n      // Filter out Shopify predictive search query params\n      !option.name.startsWith('_sid') &&\n      !option.name.startsWith('_pos') &&\n      !option.name.startsWith('_psq') &&\n      !option.name.startsWith('_ss') &&\n      !option.name.startsWith('_v'),\n  );\n\n  if (!handle) {\n    throw new Error('Expected product handle to be defined');\n  }\n\n  // await the query for the critical product data\n  const {product} = await storefront.query(PRODUCT_QUERY, {\n    variables: {handle, selectedOptions},\n  });\n  //console.log(product.variants.nodes[0].image.url);\n  //console.log(product.variants.nodes[0]);\n\n  // In order to show which variants are available in the UI, we need to query\n  // all of them. But there might be a *lot*, so instead separate the variants\n  // into it's own separate query that is deferred. So there's a brief moment\n  // where variant options might show as available when they're not, but after\n  // this deffered query resolves, the UI will update.\n  const variants = storefront.query(VARIANTS_QUERY, {\n    variables: {handle},\n  });\n\n  if (!product?.id) {\n    throw new Response(null, {status: 404});\n  }\n\n  const firstVariant = product.variants.nodes[0];\n  const firstVariantIsDefault = Boolean(\n    firstVariant.selectedOptions.find(\n      (option) => option.name === 'Title' && option.value === 'Default Title',\n    ),\n  );\n\n  if (firstVariantIsDefault) {\n    product.selectedVariant = firstVariant;\n  } else {\n    // if no selected variant was returned from the selected options,\n    // we redirect to the first variant's url with it's selected options applied\n    if (!product.selectedVariant) {\n      return redirectToFirstVariant({product, request});\n    }\n  }\n  return defer({product, variants});\n}\n\nfunction redirectToFirstVariant({product, request}) {\n  const url = new URL(request.url);\n  const firstVariant = product.variants.nodes[0];\n\n  throw redirect(\n    getVariantUrl({\n      pathname: url.pathname,\n      handle: product.handle,\n      selectedOptions: firstVariant.selectedOptions,\n      searchParams: new URLSearchParams(url.search),\n    }),\n    {\n      status: 302,\n    },\n  );\n}\n\nexport default function Product() {\n  const {product, variants} = useLoaderData();\n  const {selectedVariant} = product;\n  return (\n    <>\n    {/*<ProductVariantColrousel className=\"col-span-1 overflow-x-auto\" product={product}></ProductVariantColrousel>*/}\n      {/*<ProductImage image={selectedVariant?.image} />*/}\n      <ProductMain \n        selectedVariant={selectedVariant}\n        product={product}\n        variants={variants}\n      />\n    </>\n  );\n}\n\nfunction ProductImage({image}) {\n  if (!image) {\n    return <div className=\"\" />;\n  }\n  return (\n    <div className=\"col-span-5\">\n      <Image\n        alt={image.altText || 'Product Image'}\n        aspectRatio=\"1/1\"\n        data={image}\n        key={image.id}\n        sizes=\"(min-width: 45em) 50vw, 100vw\"\n      />\n    </div>\n  );\n}\n\nfunction ProductMain({selectedVariant, product, variants}) {\n  {/*const {title, descriptionHtml} = product;\n  return (\n    <div className=\"col-span-5\">\n      <h1>{title}</h1>\n      <ProductPrice selectedVariant={selectedVariant} />\n      <div className='shadow-2xl bg-grey'>\n      AVAILABLE OFFERS!!\n      </div>\n      <br />\n      <Suspense\n        fallback={\n          <ProductForm\n            product={product}\n            selectedVariant={selectedVariant}\n            variants={[]}\n          />\n        }\n      >\n        <Await\n          errorElement=\"There was a problem loading product variants\"\n          resolve={variants}\n        >\n          {(data) => (\n            <ProductForm\n              product={product}\n              selectedVariant={selectedVariant}\n              variants={data.product?.variants.nodes || []}\n            />\n          )}\n        </Await>\n      </Suspense>\n      <br />\n      <br />\n      <p>\n        <strong>Description</strong>\n      </p>\n      <br />\n      <div dangerouslySetInnerHTML={{__html: descriptionHtml}} />\n      <br />\n    </div>\n          );*/}\n          \n        console.log(product)\n\n            /*const [images, setImages] = useState({\n              img0 : \"https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,b_rgb:f5f5f5/3396ee3c-08cc-4ada-baa9-655af12e3120/scarpa-da-running-su-strada-invincible-3-xk5gLh.png\",\n              img1 : \"https://static.nike.com/a/images/f_auto,b_rgb:f5f5f5,w_440/e44d151a-e27a-4f7b-8650-68bc2e8cd37e/scarpa-da-running-su-strada-invincible-3-xk5gLh.png\",\n              img2 : \"https://static.nike.com/a/images/f_auto,b_rgb:f5f5f5,w_440/44fc74b6-0553-4eef-a0cc-db4f815c9450/scarpa-da-running-su-strada-invincible-3-xk5gLh.png\",\n              img3 : \"https://static.nike.com/a/images/f_auto,b_rgb:f5f5f5,w_440/d3eb254d-0901-4158-956a-4610180545e5/scarpa-da-running-su-strada-invincible-3-xk5gLh.png\"\n          })*/\n          const ImageSrc = [];\n          \n          product.images.edges.forEach((item)=>{\n            ImageSrc.push(item.node.url)\n          })\n\n          //console.log(ImageSrc)\n\n\n          const [images, setImages] = useState(ImageSrc);\n\n            const expaction = JSON.parse(product.metafields[0].value).children[0].children[0].value;\n            const key_ingredients = JSON.parse(product.metafields[1].value).children[0].children[0].value;\n            const How_To_use = JSON.parse(product.metafields[2].value).children[0].children[0].value;\n            const who_can_use = product.metafields[3].value\n            const why_us = product.metafields[4].value\n            //console.log(why_us);\n            \n            \n          \n            const [activeTab, setActiveTab] = useState('Key Ingredients');\n\n            const handleTabClick = (tab) => {\n              setActiveTab(tab);\n            };\n\n        const [activeImg, setActiveImage] = useState(images[0])\n    \n        const [amount, setAmount] = useState(1);\n        //<img src={images[0]} alt=\"\" className='w-24 h-24 rounded-md cursor-pointer' onClick={() => setActiveImage(images[0])}/>\n        //<img src={images[1]} alt=\"\" className='w-24 h-24 rounded-md cursor-pointer' onClick={() => setActiveImage(images[1])}/>\n    \n        return (\n            <>\n            <div className='flex flex-col justify-between lg:flex-row gap-16 lg:items-center'>\n                <div className='flex flex-col gap-6 lg:w-2/4'>\n                    <img src={activeImg} alt=\"\" className='w-full h-full aspect-square object-cover rounded-xl'/>\n                    <div className='flex flex-row justify-between h-full overflow-y-auto'>\n                      {product.images.edges && product.images.edges.map((item,index)=>(\n                        <img src={images[index]} alt=\"\" className='w-24 h-24 rounded-md cursor-pointer' onClick={() => setActiveImage(images[index])}/>\n                      ))\n                      }\n                    </div>\n                </div>\n                {/* ABOUT */}\n                <div className='flex flex-col lg:w-2/4'>\n                    <div>\n                        {/*<span className=' text-violet-600 font-semibold'>Special Sneaker</span>*/}\n                        <h1 className='text-3xl font-bold'>{product.title}</h1>\n                    </div>\n                    <h2>Product Description</h2>\n                    <div>\n                    <Suspense\n        fallback={\n          <ProductForm\n            product={product}\n            selectedVariant={selectedVariant}\n            variants={[]}\n          />\n        }\n      >\n        <Await\n          errorElement=\"There was a problem loading product variants\"\n          resolve={variants}\n        >\n          {(data) => (\n            <ProductForm\n              product={product}\n              selectedVariant={selectedVariant}\n              variants={data.product?.variants.nodes || []}\n            />\n          )}\n        </Await>\n      </Suspense>\n                    </div>\n                    <p className='text-gray-700'>\n                    {product.description}\n                    </p>\n                    <h6 className='text-2xl font-semibold'><ProductPrice selectedVariant={selectedVariant} /></h6>\n                    <div className='flex flex-row items-center gap-12'>\n                        <div className='flex flex-row items-center'>\n                            <button className='bg-gray-200 py-2 px-5 rounded-lg text-violet-800 text-3xl' onClick={() => setAmount((prev) => prev - 1)}>-</button>\n                            <span className='py-4 px-6 rounded-lg'>{amount}</span>\n                    <button className='bg-gray-200 py-2 px-4 rounded-lg text-violet-800 text-3xl' onClick={() => setAmount((prev) => prev + 1)}>+</button>\n                        </div>\n                        <button className='bg-violet-800 text-white font-semibold py-1 px-10 rounded-xl'>Add to Cart</button>\n                        \n                    </div>\n                </div>\n            </div>\n            <div>\n              <h2>What to Expect from {product.title} ?</h2>\n            <div dangerouslySetInnerHTML={{ __html: expaction }} />\n            </div>\n            <div className=\"container mx-auto mt-5\">\n      <h1 className=\"text-3xl font-semibold mb-4\">Product Information</h1>\n      <div className=\"flex space-x-4 overflow-y-auto\">\n        <div\n          className={`cursor-pointer py-2 lg:px-8 px-4 border-b-4 whitespace-nowrap ${\n            activeTab === 'Key Ingredients' ? 'border-blue-500' : ''\n          }`}\n          onClick={() => handleTabClick('Key Ingredients')}\n        >\n          Key Ingredients\n        </div>\n        <div\n          className={`cursor-pointer py-2 lg:px-8 px-4 border-b-4 whitespace-nowrap ${\n            activeTab === 'How to Use' ? 'border-blue-500' : ''\n          }`}\n          onClick={() => handleTabClick('How to Use')}\n        >\n          How to Use\n        </div>\n        <div\n          className={`cursor-pointer py-2 lg:px-8 px-4 border-b-4 whitespace-nowrap ${\n            activeTab === 'Who Can Use' ? 'border-blue-500' : ''\n          }`}\n          onClick={() => handleTabClick('Who Can Use')}\n        >\n          Who Can Use\n        </div>\n        <div\n          className={`cursor-pointer py-2 lg:px-8 px-4 border-b-4 whitespace-nowrap ${\n            activeTab === 'Why us' ? 'border-blue-500' : ''\n          }`}\n          onClick={() => handleTabClick('Why us')}\n        >\n          Why us\n        </div>\n      </div>\n      <div className=\"mt-4\">\n        {activeTab === 'Key Ingredients' && key_ingredients &&(\n          <div className='overflow-y-auto overflow-x-auto'>\n            <div dangerouslySetInnerHTML={{ __html: key_ingredients }} />\n          </div>\n        )}\n        {activeTab === 'How to Use' && How_To_use && (\n          <div className='overflow-y-auto'>\n            <div dangerouslySetInnerHTML={{ __html: How_To_use }} />\n          </div>\n        )}\n        {activeTab === 'Who Can Use' && who_can_use && (\n          <div className='overflow-y-auto'>\n            <div dangerouslySetInnerHTML={{ __html:who_can_use  }} />\n          </div>\n        )}\n        {activeTab === 'Why us' && why_us && (\n          <div className='overflow-y-auto'>\n            <div dangerouslySetInnerHTML={{ __html:why_us  }} />\n          </div>\n        )}\n      </div>\n    </div>\n            </>\n        );\n\n}\n\n//{\"type\":\"root\",\"children\":[{\"type\":\"paragraph\",\"children\":[{\"type\":\"text\",\"value\":\"Onion, in combination with coconut, reduces hair fall and promotes growth of lost hair.\"}]}]}\n\nfunction ProductPrice({selectedVariant}) {\n  return (\n    <div className=\"product-price\">\n      {selectedVariant?.compareAtPrice ? (\n        <>\n          <div className=\"product-price-on-sale\">\n            {selectedVariant ? <Money data={selectedVariant.price} /> : null}\n            <s>\n              <Money data={selectedVariant.compareAtPrice} />\n            </s>\n          </div>\n        </>\n      ) : (\n        selectedVariant?.price && <Money data={selectedVariant?.price} />\n      )}\n      </div>\n  );\n}\n\nfunction ProductForm({product, selectedVariant, variants}) {\n  return (\n    <div className=\"product-form\">\n      <VariantSelector\n        handle={product.handle}\n        options={product.options}\n        variants={variants}\n      >\n        {({option}) => <ProductOptions key={option.name} option={option} />}\n      </VariantSelector>\n      <br />\n      <AddToCartButton\n        disabled={!selectedVariant || !selectedVariant.availableForSale}\n        onClick={() => {\n          window.location.href = window.location.href + '#cart-aside';\n        }}\n        lines={\n          selectedVariant\n            ? [\n                {\n                  merchandiseId: selectedVariant.id,\n                  quantity: 1,\n                },\n              ]\n            : []\n        }\n      >\n        {selectedVariant?.availableForSale ? 'Add to cart' : 'Sold out'}\n      </AddToCartButton>\n    </div>\n  );\n}\n\nfunction ProductOptions({option}) {\n  return (\n    <div className=\"product-options\" key={option.name}>\n      <h5>{option.name}</h5>\n      <div className=\"product-options-grid\">\n        {option.values.map(({value, isAvailable, isActive, to}) => {\n          return (\n            <Link\n              className=\"product-options-item\"\n              key={option.name + value}\n              prefetch=\"intent\"\n              preventScrollReset\n              replace\n              to={to}\n              style={{\n                border: isActive ? '1px solid black' : '1px solid transparent',\n                opacity: isAvailable ? 1 : 0.3,\n              }}\n            >\n              <div dangerouslySetInnerHTML={{ __html:value  }} />\n            </Link>\n          );\n        })}\n      </div>\n      <br />\n    </div>\n  );\n}\n\nfunction AddToCartButton({analytics, children, disabled, lines, onClick}) {\n  return (\n    <CartForm route=\"/cart\" inputs={{lines}} action={CartForm.ACTIONS.LinesAdd}>\n      {(fetcher) => (\n        <>\n          <input\n            name=\"analytics\"\n            type=\"hidden\"\n            value={JSON.stringify(analytics)}\n          />\n          <button\n            type=\"submit\"\n            onClick={onClick}\n            disabled={disabled ?? fetcher.state !== 'idle'}\n          >\n            {children}\n          </button>\n        </>\n      )}\n    </CartForm>\n  );\n}\n\nfunction ProductVariantColrousel(product){\n  return(\n<div>\n      <ul className=\"space-y-2\">\n        <li><a href=\"#\" className=\"text-blue-500 hover:underline\">\n         {/* {product.product.images.edges.map((url)=>(\n            <img src={url.node.url} ></img>\n          ))}*/}\n          {/*console.log(product.product.images)*/}\n          {product.product.variants.nodes.map((url)=>(\n            <img src={url.image.url} ></img>\n          ))}\n          </a></li>\n      </ul>\n    </div>\n  );\n\n}\n//variants.nodes[0].image.url\nconst PRODUCT_VARIANT_FRAGMENT = `#graphql\n  fragment ProductVariant on ProductVariant {\n    availableForSale\n    compareAtPrice {\n      amount\n      currencyCode\n    }\n    id\n    image {\n      __typename\n      id\n      url\n      altText\n      width\n      height\n    }\n    price {\n      amount\n      currencyCode\n    }\n    product {\n      title\n      handle\n    }\n    quantityAvailable\n    selectedOptions {\n      name\n      value\n    }\n    sku\n    title\n    unitPrice {\n      amount\n      currencyCode\n    }\n  }\n`;\n\nconst PRODUCT_FRAGMENT = `#graphql\n  fragment Product on Product {\n    id\n    title\n    vendor\n    handle\n    descriptionHtml\n    description\n    metafields(identifiers: [{namespace: \"custom\", key: \"what_to_expect\"},{namespace: \"custom\", key: \"key_ingredients\"}, {namespace: \"custom\", key: \"how_to_use\"},{namespace: \"custom\", key: \"who_can_use\"},{namespace: \"custom\", key: \"why_we\"} ]){\n      key\n      value\n    }\n    images(first:10){\n      edges{\n        node{\n          url\n        }\n      }\n    }\n    options {\n      name\n      values\n    }\n    selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n      ...ProductVariant\n    }\n    variants(first: 10) {\n      nodes {\n        ...ProductVariant\n      }\n    }\n    seo {\n      description\n      title\n    }\n  }\n  ${PRODUCT_VARIANT_FRAGMENT}\n`;\n\nconst PRODUCT_QUERY = `#graphql\n  query Product(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n    $selectedOptions: [SelectedOptionInput!]!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...Product\n    }\n  }\n  ${PRODUCT_FRAGMENT}\n`;\n\nconst PRODUCT_VARIANTS_FRAGMENT = `#graphql\n  fragment ProductVariants on Product {\n    variants(first: 250) {\n      nodes {\n        ...ProductVariant\n      }\n    }\n  }\n  ${PRODUCT_VARIANT_FRAGMENT}\n`;\n\nconst VARIANTS_QUERY = `#graphql\n  ${PRODUCT_VARIANTS_FRAGMENT}\n  query ProductVariants(\n    $country: CountryCode\n    $language: LanguageCode\n    $handle: String!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...ProductVariants\n    }\n  }\n`;\n/*\n\nfunction JsonToHtml({ json }) {\n  const renderChildren = (children) => {\n    return children.map((child, index) => {\n      if (child.type === 'paragraph') {\n        // If the type is 'paragraph', create a <p> element\n        return <p key={index}>{child.children[0].value}</p>;\n      } else if (child.type === 'list') {\n        // Handle list elements as needed (e.g., ul, ol)\n        // You can add logic to create list elements here\n        return null;\n      } else {\n        // Handle other types or unknown types\n        return null;\n      }\n    });\n  };\n\n  return (\n    <div>\n      {renderChildren(json.children)}\n    </div>\n  );\n};\n*/\n"],
  "mappings": "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",
  "names": ["import_react"]
}
