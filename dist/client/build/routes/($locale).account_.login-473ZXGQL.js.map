{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.login.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {Form, Link, useActionData} from '@remix-run/react';\n\nexport const meta = () => {\n  return [{title: 'Login'}];\n};\n\nexport async function loader({context}) {\n  if (await context.session.get('customerAccessToken')) {\n    return redirect('/account');\n  }\n  return json({});\n}\n\nexport async function action({request, context}) {\n  const {session, storefront} = context;\n\n  if (request.method !== 'POST') {\n    return json({error: 'Method not allowed'}, {status: 405});\n  }\n\n  try {\n    const form = await request.formData();\n    const email = String(form.has('email') ? form.get('email') : '');\n    const password = String(form.has('password') ? form.get('password') : '');\n    const validInputs = Boolean(email && password);\n\n    if (!validInputs) {\n      throw new Error('Please provide both an email and a password.');\n    }\n\n    const {customerAccessTokenCreate} = await storefront.mutate(\n      LOGIN_MUTATION,\n      {\n        variables: {\n          input: {email, password},\n        },\n      },\n    );\n\n    if (!customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n      throw new Error(customerAccessTokenCreate?.customerUserErrors[0].message);\n    }\n\n    const {customerAccessToken} = customerAccessTokenCreate;\n    session.set('customerAccessToken', customerAccessToken);\n\n    return redirect('/account', {\n      headers: {\n        'Set-Cookie': await session.commit(),\n      },\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n}\n\nexport default function Login() {\n  const data = useActionData();\n  const error = data?.error || null;\n\n  return (\n    <div className=\"login\">\n      <h1>Sign in.</h1>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"email\">Email address  New</label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            required\n            placeholder=\"Email address\"\n            aria-label=\"Email address\"\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n          />\n          <label htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            minLength={8}\n            required\n          />\n        </fieldset>\n        {error ? (\n          <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        <button type=\"submit\">Sign in</button>\n      </Form>\n      <br />\n      <div>\n        <p>\n          <Link to=\"/account/recover\">Forgot password \u2192</Link>\n        </p>\n        <p>\n          <Link to=\"/account/register\">Register \u2192</Link>\n        </p>\n      </div>\n    </div>\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraccesstokencreate\nconst LOGIN_MUTATION = `#graphql\n  mutation login($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;AAkEM;AA/DC,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC,EAAC,OAAO,QAAO,CAAC;AAC1B;AAuDe,SAAR,QAAyB;AAC9B,QAAM,OAAO,cAAc;AAC3B,QAAM,QAAQ,MAAM,SAAS;AAE7B,SACE,mDAAC,SAAI,WAAU,SACb;AAAA,uDAAC,QAAG,wBAAJ;AAAA;AAAA;AAAA;AAAA,WAAY;AAAA,IACZ,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,cACC;AAAA,2DAAC,WAAM,SAAQ,SAAQ,kCAAvB;AAAA;AAAA;AAAA;AAAA,eAAyC;AAAA,QACzC;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAa;AAAA,YACb,UAAQ;AAAA,YACR,aAAY;AAAA,YACZ,cAAW;AAAA,YAEX,WAAS;AAAA;AAAA,UATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUA;AAAA,QACA,mDAAC,WAAM,SAAQ,YAAW,wBAA1B;AAAA;AAAA;AAAA;AAAA,eAAkC;AAAA,QAClC;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAa;AAAA,YACb,aAAY;AAAA,YACZ,cAAW;AAAA,YACX,WAAW;AAAA,YACX,UAAQ;AAAA;AAAA,UARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA;AAAA,WAvBF;AAAA;AAAA;AAAA;AAAA,aAwBA;AAAA,MACC,QACC,mDAAC,OACC,6DAAC,UACC,6DAAC,WAAO,mBAAR;AAAA;AAAA;AAAA;AAAA,aAAc,KADhB;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA,IAEA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MAEN,mDAAC,YAAO,MAAK,UAAS,uBAAtB;AAAA;AAAA;AAAA;AAAA,aAA6B;AAAA,SAnC/B;AAAA;AAAA;AAAA;AAAA,WAoCA;AAAA,IACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,IACJ,mDAAC,SACC;AAAA,yDAAC,OACC,6DAAC,QAAK,IAAG,oBAAmB,sCAA5B;AAAA;AAAA;AAAA;AAAA,aAA6C,KAD/C;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,OACC,6DAAC,QAAK,IAAG,qBAAoB,+BAA7B;AAAA;AAAA;AAAA;AAAA,aAAuC,KADzC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SANF;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,OA/CF;AAAA;AAAA;AAAA;AAAA,SAgDA;AAEJ;",
  "names": []
}
