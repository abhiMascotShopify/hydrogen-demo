{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.register.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {Form, Link, useActionData} from '@remix-run/react';\n\nexport async function loader({context}) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (customerAccessToken) {\n    return redirect('/account');\n  }\n\n  return json({});\n}\n\nexport const action = async ({request, context}) => {\n  if (request.method !== 'POST') {\n    return json({error: 'Method not allowed'}, {status: 405});\n  }\n\n  const {storefront, session} = context;\n  const form = await request.formData();\n  const email = String(form.has('email') ? form.get('email') : '');\n  const password = form.has('password') ? String(form.get('password')) : null;\n  const passwordConfirm = form.has('passwordConfirm')\n    ? String(form.get('passwordConfirm'))\n    : null;\n\n  const validPasswords =\n    password && passwordConfirm && password === passwordConfirm;\n\n  const validInputs = Boolean(email && password);\n  try {\n    if (!validPasswords) {\n      throw new Error('Passwords do not match');\n    }\n\n    if (!validInputs) {\n      throw new Error('Please provide both an email and a password.');\n    }\n\n    const {customerCreate} = await storefront.mutate(CUSTOMER_CREATE_MUTATION, {\n      variables: {\n        input: {email, password},\n      },\n    });\n\n    if (customerCreate?.customerUserErrors?.length) {\n      throw new Error(customerCreate?.customerUserErrors[0].message);\n    }\n\n    const newCustomer = customerCreate?.customer;\n    if (!newCustomer?.id) {\n      throw new Error('Could not create customer');\n    }\n\n    // get an access token for the new customer\n    const {customerAccessTokenCreate} = await storefront.mutate(\n      REGISTER_LOGIN_MUTATION,\n      {\n        variables: {\n          input: {\n            email,\n            password,\n          },\n        },\n      },\n    );\n\n    if (!customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n      throw new Error('Missing access token');\n    }\n    session.set(\n      'customerAccessToken',\n      customerAccessTokenCreate?.customerAccessToken,\n    );\n\n    return json(\n      {error: null, newCustomer},\n      {\n        status: 302,\n        headers: {\n          'Set-Cookie': await session.commit(),\n          Location: '/account',\n        },\n      },\n    );\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n};\n\nexport default function Register() {\n  const data = useActionData();\n  const error = data?.error || null;\n  return (\n    <div className=\"login\">\n      <h1>Register.</h1>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"email\">Email address</label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            required\n            placeholder=\"Email address\"\n            aria-label=\"Email address\"\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n          />\n          <label htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            minLength={8}\n            required\n          />\n          <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n          <input\n            id=\"passwordConfirm\"\n            name=\"passwordConfirm\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Re-enter password\"\n            aria-label=\"Re-enter password\"\n            minLength={8}\n            required\n          />\n        </fieldset>\n        {error ? (\n          <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        <button type=\"submit\">Register</button>\n      </Form>\n      <br />\n      <p>\n        <Link to=\"/account/login\">Login \u2192</Link>\n      </p>\n    </div>\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerCreate\nconst CUSTOMER_CREATE_MUTATION = `#graphql\n  mutation customerCreate(\n    $input: CustomerCreateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerCreate(input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraccesstokencreate\nconst REGISTER_LOGIN_MUTATION = `#graphql\n  mutation registerLogin(\n    $input: CustomerAccessTokenCreateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;AAiGM;AALS,SAAR,WAA4B;AACjC,QAAM,OAAO,cAAc;AAC3B,QAAM,QAAQ,MAAM,SAAS;AAC7B,SACE,mDAAC,SAAI,WAAU,SACb;AAAA,uDAAC,QAAG,yBAAJ;AAAA;AAAA;AAAA;AAAA,WAAa;AAAA,IACb,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,cACC;AAAA,2DAAC,WAAM,SAAQ,SAAQ,6BAAvB;AAAA;AAAA;AAAA;AAAA,eAAoC;AAAA,QACpC;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAa;AAAA,YACb,UAAQ;AAAA,YACR,aAAY;AAAA,YACZ,cAAW;AAAA,YAEX,WAAS;AAAA;AAAA,UATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUA;AAAA,QACA,mDAAC,WAAM,SAAQ,YAAW,wBAA1B;AAAA;AAAA;AAAA;AAAA,eAAkC;AAAA,QAClC;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAa;AAAA,YACb,aAAY;AAAA,YACZ,cAAW;AAAA,YACX,WAAW;AAAA,YACX,UAAQ;AAAA;AAAA,UARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA;AAAA,QACA,mDAAC,WAAM,SAAQ,mBAAkB,iCAAjC;AAAA;AAAA;AAAA;AAAA,eAAkD;AAAA,QAClD;AAAA,UAAC;AAAA;AAAA,YACC,IAAG;AAAA,YACH,MAAK;AAAA,YACL,MAAK;AAAA,YACL,cAAa;AAAA,YACb,aAAY;AAAA,YACZ,cAAW;AAAA,YACX,WAAW;AAAA,YACX,UAAQ;AAAA;AAAA,UARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASA;AAAA,WAlCF;AAAA;AAAA;AAAA;AAAA,aAmCA;AAAA,MACC,QACC,mDAAC,OACC,6DAAC,UACC,6DAAC,WAAO,mBAAR;AAAA;AAAA;AAAA;AAAA,aAAc,KADhB;AAAA;AAAA;AAAA;AAAA,aAEA,KAHF;AAAA;AAAA;AAAA;AAAA,aAIA,IAEA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MAEN,mDAAC,YAAO,MAAK,UAAS,wBAAtB;AAAA;AAAA;AAAA;AAAA,aAA8B;AAAA,SA9ChC;AAAA;AAAA;AAAA;AAAA,WA+CA;AAAA,IACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,IACJ,mDAAC,OACC,6DAAC,QAAK,IAAG,kBAAiB,4BAA1B;AAAA;AAAA;AAAA;AAAA,WAAiC,KADnC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OArDF;AAAA;AAAA;AAAA;AAAA,SAsDA;AAEJ;",
  "names": []
}
