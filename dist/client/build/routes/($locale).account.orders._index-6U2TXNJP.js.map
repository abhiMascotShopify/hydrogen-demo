{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.orders._index.jsx"],
  "sourcesContent": ["import {Link, useLoaderData} from '@remix-run/react';\nimport {Money, Pagination, getPaginationVariables} from '@shopify/hydrogen';\nimport {json, redirect} from '@shopify/remix-oxygen';\nimport { PencilIcon } from \"@heroicons/react/24/solid\";\nimport {\n  ArrowDownTrayIcon,\n  MagnifyingGlassIcon,\n} from \"@heroicons/react/24/outline\";\nimport {\n  Card,\n  CardHeader,\n  Typography,\n  Button,\n  CardBody,\n  Chip,\n  CardFooter,\n  Avatar,\n  IconButton,\n  Tooltip,\n  Input,\n} from \"@material-tailwind/react\";\n\nexport const meta = () => {\n  return [{title: 'Orders'}];\n};\n\nexport async function loader({request, context}) {\n  const {session, storefront} = context;\n\n  const customerAccessToken = await session.get('customerAccessToken');\n  if (!customerAccessToken?.accessToken) {\n    return redirect('/account/login');\n  }\n\n  try {\n    const paginationVariables = getPaginationVariables(request, {\n      pageBy: 20,\n    });\n\n    const {customer} = await storefront.query(CUSTOMER_ORDERS_QUERY, {\n      variables: {\n        customerAccessToken: customerAccessToken.accessToken,\n        country: storefront.i18n.country,\n        language: storefront.i18n.language,\n        ...paginationVariables,\n      },\n      cache: storefront.CacheNone(),\n    });\n\n    if (!customer) {\n      throw new Error('Customer not found');\n    }\n\n    return json({customer});\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n}\n\nexport default function Orders() {\n  const {customer} = useLoaderData();\n  const {orders, numberOfOrders} = customer;\n  return (\n    <div className=\"h-full w-full\">\n      <h2>\n        Orders <small>({numberOfOrders})</small>\n      </h2>\n      <br />\n      {orders.nodes.length ? <OrdersTable orders={orders} /> : <EmptyOrders />}\n    </div>\n  );\n}\n\nfunction OrdersTable({orders}) {\n  return (\n    <div>\n    {/*<div className=\"flex acccount-orders\">\n      {orders?.nodes.length ? (\n        <Pagination connection={orders}>\n          {({nodes, isLoading, PreviousLink, NextLink}) => {\n            return (\n              <>\n                <PreviousLink>\n                  {isLoading ? 'Loading...' : <span>\u2191 Load previous</span>}\n                </PreviousLink>\n                {nodes.map((order) => {\n                  return <OrderItem key={order.id} order={order} />;\n                })}\n                <NextLink>\n                  {isLoading ? 'Loading...' : <span>Load more \u2193</span>}\n                </NextLink>\n              </>\n            );\n          }}\n        </Pagination>\n      ) : (\n        <EmptyOrders />\n      )}\n    </div>\n      );*/}\n      <OrderItem orders={orders}></OrderItem>\n      </div>\n  )\n}\n\nfunction EmptyOrders() {\n  return (\n    <div>\n      <p>You haven&apos;t placed any orders yet.</p>\n      <br />\n      <p>\n        <Link to=\"/collections\">Start Shopping \u2192</Link>\n      </p>\n    </div>\n  );\n}\n\nfunction OrderItem({orders}) {\n  //console.log(orders.nodes[0])\n  const TABLE_HEAD = [\"Product\", \"Amount\", \"Date\", \"Status\"];\n   \n  const TABLE_ROWS = [\n    {\n      img: \"https://demos.creative-tim.com/test/corporate-ui-dashboard/assets/img/logos/visa.png\",\n      name: \"Spotify\",\n      amount: \"$2,500\",\n      date: \"Wed 3:00pm\",\n      status: \"paid\",\n      account: \"visa\",\n      accountNumber: \"1234\",\n      expiry: \"06/2026\",\n    },\n    {\n      img: \"https://demos.creative-tim.com/test/corporate-ui-dashboard/assets/img/logos/visa.png\",\n      name: \"Amazon\",\n      amount: \"$5,000\",\n      date: \"Wed 1:00pm\",\n      status: \"paid\",\n      account: \"master-card\",\n      accountNumber: \"1234\",\n      expiry: \"06/2026\",\n    },\n    {\n      img: \"https://demos.creative-tim.com/test/corporate-ui-dashboard/assets/img/logos/visa.png\",\n      name: \"Pinterest\",\n      amount: \"$3,400\",\n      date: \"Mon 7:40pm\",\n      status: \"pending\",\n      account: \"master-card\",\n      accountNumber: \"1234\",\n      expiry: \"06/2026\",\n    },\n    {\n      img: \"https://demos.creative-tim.com/test/corporate-ui-dashboard/assets/img/logos/visa.png\",\n      name: \"Google\",\n      amount: \"$1,000\",\n      date: \"Wed 5:00pm\",\n      status: \"paid\",\n      account: \"visa\",\n      accountNumber: \"1234\",\n      expiry: \"06/2026\",\n    },\n    {\n      img: \"https://demos.creative-tim.com/test/corporate-ui-dashboard/assets/img/logos/visa.png\",\n      name: \"netflix\",\n      amount: \"$14,000\",\n      date: \"Wed 3:30am\",\n      status: \"cancelled\",\n      account: \"visa\",\n      accountNumber: \"1234\",\n      expiry: \"06/2026\",\n    },\n  ];\n    return (\n      <Card className=\"h-[90] overflow-y-auto w-full\">\n        <CardBody className=\"px-0\">\n          <table className=\"w-full table-auto text-left\">\n            <thead>\n              <tr>\n                {TABLE_HEAD.map((head) => (\n                  <th\n                    key={head}\n                    className=\"border-y border-blue-gray-100 bg-blue-gray-50/50 p-4\"\n                  >\n                    <Typography\n                      variant=\"small\"\n                      color=\"blue-gray\"\n                      className=\"font-normal leading-none opacity-70\"\n                    >\n                      {head}\n                    </Typography>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {orders.nodes.map(\n                (\n                  order,\n                  index\n                ) => {\n                  const isLast = index === TABLE_ROWS.length - 1;\n                  const classes = isLast\n                    ? \"p-4\"\n                    : \"p-4 border-b border-blue-gray-50\";\n   \n                  return (\n                    <tr key={order.lineItems.nodes[0].title}>\n                      <td className={classes}>\n                        <div className=\"flex items-center gap-3\">\n                          <Avatar\n                            src={order.lineItems.nodes[0].variant.image.url}\n                            alt={order.lineItems.nodes[0].title}\n                            size=\"md\"\n                            className=\"border border-blue-gray-50 bg-blue-gray-50/50 object-contain p-1\"\n                          />\n                          <Typography\n                            variant=\"small\"\n                            color=\"blue-gray\"\n                            className=\"font-bold\"\n                          >\n                            {order.lineItems.nodes[0].title}\n                          </Typography>\n                        </div>\n                      </td>\n                      <td className={classes}>\n                        <Typography\n                          variant=\"small\"\n                          color=\"blue-gray\"\n                          className=\"font-normal\"\n                        >\n                          {order.currentTotalPrice.amount}\n                        </Typography>\n                      </td>\n                      <td className={classes}>\n                        <Typography\n                          variant=\"small\"\n                          color=\"blue-gray\"\n                          className=\"font-normal\"\n                        >\n                          {order.processedAt}\n                        </Typography>\n                      </td>\n                      <td className={classes}>\n                        <div className=\"w-max\">\n                          <Chip\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            value={order.financialStatus}\n                            color={\n                              order.financialStatus === \"paid\"\n                                ? \"green\"\n                                : order.financialStatus === \"pending\"\n                                ? \"amber\"\n                                : \"red\"\n                            }\n                          />\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                },\n              )}\n            </tbody>\n          </table>\n        </CardBody>\n      </Card>\n    );\n  }/*\n  return (\n    <>\n      {/*<fieldset>\n        <Link to={`/account/orders/${order.id}`}>\n          <strong>#{order.orderNumber}</strong>\n        </Link>\n        <p>{new Date(order.processedAt).toDateString()}</p>\n        <p>{order.financialStatus}</p>\n        <p>{order.fulfillmentStatus}</p>\n        <Money data={order.currentTotalPrice} />\n        <Link to={`/account/orders/${btoa(order.id)}`}>View Order \u2192</Link>\n      </fieldset>\n  <br />}\n\n    </>\n  );\n}*/\n\nconst ORDER_ITEM_FRAGMENT = `#graphql\n  fragment OrderItem on Order {\n    currentTotalPrice {\n      amount\n      currencyCode\n    }\n    financialStatus\n    fulfillmentStatus\n    id\n    lineItems(first: 10) {\n      nodes {\n        title\n        variant {\n          image {\n            url\n            altText\n            height\n            width\n          }\n        }\n      }\n    }\n    orderNumber\n    customerUrl\n    statusUrl\n    processedAt\n  }\n`;\n\nexport const CUSTOMER_FRAGMENT = `#graphql\n  fragment CustomerOrders on Customer {\n    numberOfOrders\n    orders(\n      sortKey: PROCESSED_AT,\n      reverse: true,\n      first: $first,\n      last: $last,\n      before: $startCursor,\n      after: $endCursor\n    ) {\n      nodes {\n        ...OrderItem\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n  ${ORDER_ITEM_FRAGMENT}\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/customer\nconst CUSTOMER_ORDERS_QUERY = `#graphql\n  ${CUSTOMER_FRAGMENT}\n  query CustomerOrders(\n    $country: CountryCode\n    $customerAccessToken: String!\n    $endCursor: String\n    $first: Int\n    $language: LanguageCode\n    $last: Int\n    $startCursor: String\n  ) @inContext(country: $country, language: $language) {\n    customer(customerAccessToken: $customerAccessToken) {\n      ...CustomerOrders\n    }\n  }\n`;\n"],
  "mappings": "iVAQA,IAAAA,EAYO,OAgDQC,EAAA,OA9CFC,EAAO,IACX,CAAC,CAAC,MAAO,QAAQ,CAAC,EAuCZ,SAARC,GAA0B,CAC/B,GAAM,CAAC,SAAAC,CAAQ,EAAIC,EAAc,EAC3B,CAAC,OAAAC,EAAQ,eAAAC,CAAc,EAAIH,EACjC,SACE,QAAC,OAAI,UAAU,gBACb,qBAAC,MAAG,uBACK,QAAC,SAAM,cAAEG,EAAe,KAAC,GAClC,KACA,OAAC,OAAG,EACHD,EAAO,MAAM,UAAS,OAACE,EAAA,CAAY,OAAQF,EAAQ,KAAK,OAACG,EAAA,EAAY,GACxE,CAEJ,CAEA,SAASD,EAAY,CAAC,OAAAF,CAAM,EAAG,CAC7B,SACE,OAAC,OAyBC,mBAACI,EAAA,CAAU,OAAQJ,EAAQ,EAC3B,CAEN,CAEA,SAASG,GAAc,CACrB,SACE,QAAC,OACC,oBAAC,KAAE,8CAAuC,KAC1C,OAAC,OAAG,KACJ,OAAC,KACC,mBAACE,EAAA,CAAK,GAAG,eAAe,iCAAgB,EAC1C,GACF,CAEJ,CAEA,SAASD,EAAU,CAAC,OAAAJ,CAAM,EAAG,CAE3B,IAAMM,EAAa,CAAC,UAAW,SAAU,OAAQ,QAAQ,EAEnDC,EAAa,CACjB,CACE,IAAK,uFACL,KAAM,UACN,OAAQ,SACR,KAAM,aACN,OAAQ,OACR,QAAS,OACT,cAAe,OACf,OAAQ,SACV,EACA,CACE,IAAK,uFACL,KAAM,SACN,OAAQ,SACR,KAAM,aACN,OAAQ,OACR,QAAS,cACT,cAAe,OACf,OAAQ,SACV,EACA,CACE,IAAK,uFACL,KAAM,YACN,OAAQ,SACR,KAAM,aACN,OAAQ,UACR,QAAS,cACT,cAAe,OACf,OAAQ,SACV,EACA,CACE,IAAK,uFACL,KAAM,SACN,OAAQ,SACR,KAAM,aACN,OAAQ,OACR,QAAS,OACT,cAAe,OACf,OAAQ,SACV,EACA,CACE,IAAK,uFACL,KAAM,UACN,OAAQ,UACR,KAAM,aACN,OAAQ,YACR,QAAS,OACT,cAAe,OACf,OAAQ,SACV,CACF,EACE,SACE,OAAC,QAAK,UAAU,gCACd,mBAAC,YAAS,UAAU,OAClB,oBAAC,SAAM,UAAU,8BACf,oBAAC,SACC,mBAAC,MACE,SAAAD,EAAW,IAAKE,MACf,OAAC,MAEC,UAAU,uDAEV,mBAAC,cACC,QAAQ,QACR,MAAM,YACN,UAAU,sCAET,SAAAA,EACH,GATKA,CAUP,CACD,EACH,EACF,KACA,OAAC,SACE,SAAAR,EAAO,MAAM,IACZ,CACES,EACAC,IACG,CAEH,IAAMC,EADSD,IAAUH,EAAW,OAAS,EAEzC,MACA,mCAEJ,SACE,QAAC,MACC,oBAAC,MAAG,UAAWI,EACb,oBAAC,OAAI,UAAU,0BACb,oBAAC,UACC,IAAKF,EAAM,UAAU,MAAM,CAAC,EAAE,QAAQ,MAAM,IAC5C,IAAKA,EAAM,UAAU,MAAM,CAAC,EAAE,MAC9B,KAAK,KACL,UAAU,mEACZ,KACA,OAAC,cACC,QAAQ,QACR,MAAM,YACN,UAAU,YAET,SAAAA,EAAM,UAAU,MAAM,CAAC,EAAE,MAC5B,GACF,EACF,KACA,OAAC,MAAG,UAAWE,EACb,mBAAC,cACC,QAAQ,QACR,MAAM,YACN,UAAU,cAET,SAAAF,EAAM,kBAAkB,OAC3B,EACF,KACA,OAAC,MAAG,UAAWE,EACb,mBAAC,cACC,QAAQ,QACR,MAAM,YACN,UAAU,cAET,SAAAF,EAAM,YACT,EACF,KACA,OAAC,MAAG,UAAWE,EACb,mBAAC,OAAI,UAAU,QACb,mBAAC,QACC,KAAK,KACL,QAAQ,QACR,MAAOF,EAAM,gBACb,MACEA,EAAM,kBAAoB,OACtB,QACAA,EAAM,kBAAoB,UAC1B,QACA,MAER,EACF,EACF,IAnDOA,EAAM,UAAU,MAAM,CAAC,EAAE,KAoDlC,CAEJ,CACF,EACF,GACF,EACF,EACF,CAEJ,CAmBF,IAAMG,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BfC,EAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsB7BD;AAAA,EAIEE,EAAwB;AAAA,IAC1BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": ["import_react", "import_jsx_runtime", "meta", "Orders", "customer", "useLoaderData", "orders", "numberOfOrders", "OrdersTable", "EmptyOrders", "OrderItem", "Link", "TABLE_HEAD", "TABLE_ROWS", "head", "order", "index", "classes", "ORDER_ITEM_FRAGMENT", "CUSTOMER_FRAGMENT", "CUSTOMER_ORDERS_QUERY"]
}
